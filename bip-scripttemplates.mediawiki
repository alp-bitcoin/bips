<pre>
  BIP:     BIP-?
  Title:   Hierarchical Deterministic Script Templates
  Author:  Eric Lombrozo <eric@ciphrex.com>, William Swanson
  Status:  Draft
  Type:    Informational
  Created: 2015-11-20
</pre>

==Abstract==

This BIP defines a script template format that can be used by wallets to deterministically generate scripts with specific authorization policies using the key derivation mechanism defined in BIP32.

==Motivation==

Currently existing wallets typically issue scripts in only a tiny handful of widely used formats. The most popular formats are pay-to-pubkey-hash and m-of-n pay-to-script-hash (BIP16). However, different wallets tend to use mutually incompatible derivation schemes to generate signing keys and construct scripts from them. Moreover, with the advent of hashlocked and timelocked contracts (BIP65, BIP112), it is necessary for different wallets to be able to cooperatively generate even more sophisticated scripts. In addition, there's a lot of ongoing work in the development of multilayered protocols that use the blockchain as a settlement layer (i.e. the Lightning Network).

This BIP provides a generalized format for constructing a script template that guarantees that different wallets will all produce the same scripts for a given set of derivation paths according to BIP32.

==Specification==

===Key Groups===

Let '''m'''<sub>i</sub> denote distinct BIP32 derivation paths. We define a key group as a set of key derivation paths with a free index k:

'''K'''<sub>k</sub> = { '''m'''<sub>1</sub>/k, '''m'''<sub>2</sub>/k, '''m'''<sub>3</sub>/k, ... }

===Sorting===

We define a lexicographic sorting of the keys, Sort('''K'''<sub>k</sub>), an ordered list.

Define Sort<sub>j</sub>('''K'''<sub>k</sub>) to be the jth element of the sorted keys for derivation index k.

===Script Templates===

We construct script templates by inserting placeholders for keys into a script. To denote a placeholder for a key, we use the following notation:

'''SCRIPT'''<sub>k</sub> = opcodes ... ['''KEY'''<sub>k</sub>] ... opcodes

===Encoding===

TODO

==Examples==

===2-of-3 Multisig===

2 [Sort<sub>1</sub>('''K'''<sub>k</sub>)] [Sort<sub>2</sub>('''K'''<sub>k</sub>)] [Sort<sub>3</sub>('''K'''<sub>k</sub>)] 3 OP_CHECKMULTISIG

===1-of-1 or 2-of-3===

Let '''M''' be a BIP32 derivation path for a superuser that can authorize all transactions and '''K''' be a key group for three users that can only authorize transactions if at least two of them agree.

OP_DUP ['''M'''/k] OP_CHECKSIG<br>
OP_NOTIF<br>
&nbsp; &nbsp; &nbsp; &nbsp; 2 [Sort<sub>1</sub>('''K'''<sub>k</sub>)] [Sort<sub>2</sub>('''K'''<sub>k</sub>)] [Sort<sub>3</sub>('''K'''<sub>k</sub>)] 3 OP_CHECKMULTISIGVERIFY <br>
OP_ENDIF<br>
OP_TRUE

===Hashlocked Contract===

TODO

==Reference==

* [[bip-0016.mediawiki|BIP16 - Pay to Script Hash]]
* [[bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]]
* [[bip-0065.mediawiki|BIP65 - OP_CHECKLOCKTIMEVERIFY]]
* [[bip-0112.mediawiki|BIP112 - CHECKSEQUENCEVERIFY]]
* [[https://lightning.network/lightning-network-paper.pdf|Lightning Network Whitepaper]]
